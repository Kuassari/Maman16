#BlueJ class context
comment0.params=k
comment0.target=RedBlackTree(int)
comment1.params=node
comment1.target=boolean\ isNil(RedBlackNode)
comment1.text=\ \r\n\ The\ Function\ check\ if\ the\ node\ is\ nil.\r\n\r\n\ @param\:\ node,\ The\ RedBlackNode\ we\ must\ check\ to\ see\ whether\ it's\ nil.\r\n\ @return\:\ Return's\ true\ of\ node\ is\ nil\ and\ false\ otherwise.\r\n
comment10.params=z
comment10.target=void\ Remove(RedBlackNode)
comment10.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 242\ in\ the\ course\ book.\r\n\ The\ function\ gets\ the\ maximum\ in\ the\ tree\ from\ the\ function\ insert,\ and\ delete\ the\ maximum.\r\n\r\n\ @param\:\ z,\ the\ node\ we\ want\ to\ delete.\r\n\ The\ function\ remove's\ z\ from\ the\ RedBlackTree\ rooted\ at\ root.\r\n
comment11.params=x
comment11.target=void\ RemoveFixup(RedBlackNode)
comment11.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 243\ in\ the\ course\ book.\r\n\ The\ function\ restores\ the\ Red\ Black\ properties\ that\ may\ have\ been\ violated\ during\ the\ removal\ of\ a\ node\ in\ remove(RedBlackNode\ v).\r\n\r\n\ @param\:\ x,\ the\ child\ of\ the\ deleted\ node\ from\ remove(RedBlackNode\ v).\r\n
comment12.params=
comment12.target=void\ printkMin()
comment12.text=\ \r\n\ This\ is\ function\ that\ overloads\ the\ actuall\ function.\r\n
comment13.params=x
comment13.target=void\ printkMin(RedBlackNode)
comment13.text=\ \r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 214\ in\ the\ course\ book.\r\n\ The\ Algorithm\ Print\ the\ tree\ that\ contains\ the\ smallest\ k\ values.\r\n\r\n\ @param\:\ x,\ from\ where\ to\ start\ the\ scan.\r\n
comment2.params=x
comment2.target=void\ leftRotate(RedBlackNode)
comment2.text=\ \r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 234\ in\ the\ course\ book.\r\n\ The\ function\ Performs\ a\ left\ Rotate\ around\ x.\r\n\r\n\ @param\:\ x,\ The\ node\ which\ the\ lefRotate\ is\ to\ be\ performed\ on.\r\n
comment3.params=x
comment3.target=void\ rightRotate(RedBlackNode)
comment3.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 187\ in\ the\ study\ instructions\ book.\r\n\ The\ function\ Performs\ a\ right\ Rotate\ around\ x.\r\n\ \r\n\ @param\:\ x,\ The\ node\ which\ the\ rightRotate\ is\ to\ be\ performed\ on.\r\n
comment4.params=x
comment4.target=RedBlackNode\ TreeMinimum(RedBlackNode)
comment4.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 217\ in\ the\ course\ book.\r\n\ because\ RBT\ is\ based\ on\ binary-search\ tree,\ the\ algorithem\ is\ working\ on\ RBT\ too.\r\n\r\n\ @param\:\ x,\ a\ RedBlackNode.\r\n\ @return\:\ returns\ the\ current\ minimum\ value\ in\ the\ tree.\r\n
comment5.params=x
comment5.target=RedBlackNode\ TreeMaximum(RedBlackNode)
comment5.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 217\ in\ the\ course\ book.\r\n\ because\ RBT\ is\ based\ on\ binary-search\ tree,\ the\ algorithem\ is\ working\ on\ RBT\ too.\r\n\r\n\ @param\:\ x,\ a\ RedBlackNode.\r\n\ @return\:\ returns\ the\ current\ maximum\ value\ in\ the\ tree.\r\n
comment6.params=x
comment6.target=RedBlackNode\ TreeSuccessor(RedBlackNode)
comment6.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 218\ in\ the\ course\ book.\r\n\ because\ RBT\ is\ based\ on\ binary-search-tree\ structure,\ the\ algorithem\ is\ working\ on\ RBT\ too.\r\n\r\n\ @param\:\ x,\ a\ RedBlackNode\ whose\ successor\ we\ must\ find.\r\n\ @return\:\ return's\ the\ node\ the\ with\ the\ next\ largest\ key\ from\ x.key.\r\n
comment7.params=key
comment7.target=void\ Insert(java.lang.Comparable)
comment7.text=\r\n\ This\ is\ function\ that\ overloads\ the\ actuall\ function.\r\n\r\n\ @param\:\ the\ key\ you\ want\ to\ insert\ to\ the\ tree.\ \r\n
comment8.params=z
comment8.target=void\ Insert(RedBlackNode)
comment8.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 236\ in\ the\ course\ book.\r\n\ The\ function\ inserts\ z\ into\ the\ appropriate\ position\ in\ the\ RedBlackTree\ while\ updating\ numLeft\ and\ numRight\ values.\r\n\r\n\ @param\:\ z,\ the\ node\ to\ be\ inserted\ into\ the\ Tree\ rooted\ at\ root.\r\n
comment9.params=z
comment9.target=void\ InsertFixup(RedBlackNode)
comment9.text=\r\n\ The\ Algorithm\ based\ on\ the\ one\ in\ page\ 236\ in\ the\ course\ book.\r\n\ The\ function\ fixes\ up\ the\ violation\ of\ the\ RedBlackTree\ properties\ that\ may\ have\ been\ caused\ during\ insert(z).\r\n\r\n\ @param\:\ z,\ the\ node\ which\ was\ inserted\ and\ may\ have\ caused\ a\ violation\ of\ the\ RedBlackTree\ properties.\r\n
numComments=14
